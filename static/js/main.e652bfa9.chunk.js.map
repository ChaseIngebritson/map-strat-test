{"version":3,"sources":["Game.js","components/Map/Map.js","components/Map/index.js","App.js","reportWebVitals.js","index.js"],"names":["data","map","locationIn","location","occupied","Game","setup","cells","turn","moveLimit","moves","clickCell","G","ctx","id","INVALID_MOVE","currentPlayer","registerLoaders","GLTFLoader","INITIAL_VIEW_STATE","latitude","longitude","zoom","bearing","pitch","createScenegraphLayer","layerId","scenegraphModelUrl","coordinates","sizeScale","scenegraph","position","size","_lighting","getPosition","d","getOrientation","getTranslation","getScale","pickable","onClick","layer","$event","console","log","Map","props","useState","model1Coords","setModel1Coords","model2Coords","setModel2Coords","hexagonLayer","extruded","radius","elevationScale","autoHighlight","opacity","COORDINATES","index","object","model1","model2","className","initialViewState","controller","debug","mapboxApiAccessToken","source","filter","type","minzoom","paint","App","Client","game","board","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e652bfa9.chunk.js","sourcesContent":["import { INVALID_MOVE } from 'boardgame.io/core';\r\n\r\nimport SfBikeParkingData from './data/sf-bike-parking.json';\r\n\r\nconst data = SfBikeParkingData.map(locationIn => {\r\n  const location = locationIn\r\n  location.occupied = null\r\n  return location\r\n})\r\n\r\nconst Game = {\r\n  setup: () => ({ \r\n    cells: data\r\n  }),\r\n\r\n  turn: {\r\n    moveLimit: 1,\r\n  },\r\n\r\n  moves: {\r\n    clickCell: (G, ctx, id) => {\r\n      if (G.cells[id].occupied !== null) {\r\n        return INVALID_MOVE;\r\n      }\r\n\r\n      G.cells[id].occupied = ctx.currentPlayer;\r\n    },\r\n  },\r\n}\r\n\r\nexport default Game","import { useState } from 'react';\r\nimport DeckGL from '@deck.gl/react';\r\nimport ReactMapGL, { Layer }  from 'react-map-gl';\r\nimport { ScenegraphLayer } from '@deck.gl/mesh-layers'\r\nimport { GLTFLoader } from '@loaders.gl/gltf';\r\nimport { registerLoaders } from '@loaders.gl/core';\r\nimport { HexagonLayer } from '@deck.gl/aggregation-layers';\r\n\r\nimport './Map.css';\r\n\r\nregisterLoaders(GLTFLoader);\r\n\r\nconst MAPBOX_ACCESS_TOKEN = 'pk.eyJ1IjoiZ29tb25rZXlhbWFuZ28iLCJhIjoiY2tjc2tjd2UxMHZsMzJxcGQ1YjlpMms3eSJ9._EZ2ZSCNrB8tdYqPhSaYSQ'\r\n\r\nconst INITIAL_VIEW_STATE = {\r\n  latitude: 37.779654,\r\n  longitude: -122.395232,\r\n  zoom: 15.5,\r\n  bearing: -17.6,\r\n  pitch: 45\r\n};\r\n\r\nfunction createScenegraphLayer (\r\n  layerId,\r\n  scenegraphModelUrl,\r\n  coordinates,\r\n  sizeScale\r\n) {\r\n  return {\r\n    id: layerId,\r\n    scenegraph: scenegraphModelUrl,\r\n    data: [{ position: coordinates, size: 100 }],\r\n    sizeScale,\r\n    _lighting: 'pbr',\r\n    getPosition: d => d.position,\r\n    getOrientation: [0, 330, 90],\r\n    getTranslation: [0, 0, 0],\r\n    getScale: [1, 1, 1],\r\n    pickable: true,\r\n    onClick: (layer, $event) => {\r\n      console.log('triggered scenegraphLayer click', layer)\r\n      return true\r\n    }\r\n  }\r\n}\r\n\r\nfunction Map (props) {\r\n  const [model1Coords, setModel1Coords] = useState([INITIAL_VIEW_STATE.longitude, INITIAL_VIEW_STATE.latitude]);\r\n  const [model2Coords, setModel2Coords] = useState([INITIAL_VIEW_STATE.longitude, INITIAL_VIEW_STATE.latitude]);\r\n\r\n  // console.log(props)\r\n\r\n  const threeDLayer = {\r\n    id: '3d-buildings',\r\n    source: 'composite',\r\n    'source-layer': 'building',\r\n    filter: ['==', 'extrude', 'true'],\r\n    type: 'fill-extrusion',\r\n    minzoom: 15,\r\n    paint: {\r\n      'fill-extrusion-color': '#aaa',\r\n  \r\n      // use an 'interpolate' expression to add a smooth transition effect to the\r\n      // buildings as the user zooms in\r\n      'fill-extrusion-height': [\r\n        'interpolate',\r\n        ['linear'],\r\n        ['zoom'],\r\n        15,\r\n        0,\r\n        15.05,\r\n        ['get', 'height']\r\n      ],\r\n      'fill-extrusion-base': [\r\n        'interpolate',\r\n        ['linear'],\r\n        ['zoom'],\r\n        15,\r\n        0,\r\n        15.05,\r\n        ['get', 'min_height']\r\n      ],\r\n      'fill-extrusion-opacity': 0.6\r\n    }\r\n  };\r\n\r\n  const hexagonLayer = {\r\n    id: 'hexagon-layer',\r\n    data: props.G.cells,\r\n    pickable: true,\r\n    extruded: true,\r\n    radius: 50,\r\n    elevationScale: 0,\r\n    autoHighlight: true,\r\n    opacity: 0.3,\r\n    getPosition: d => d.COORDINATES,\r\n    onClick: (layer, $event) => {\r\n      console.log('triggered hexagonLayer click', layer)\r\n      props.moves.clickCell(layer.index);\r\n\r\n      switch (props.ctx.currentPlayer) {\r\n        case '0':\r\n          setModel1Coords(layer.object.position)\r\n          break\r\n        case '1':\r\n          setModel2Coords(layer.object.position)\r\n          break\r\n        default:\r\n          console.log('invalid player')\r\n          break\r\n      }\r\n      \r\n      return true\r\n    }\r\n  };\r\n\r\n  const model1 = createScenegraphLayer(\r\n    'duckObject1',\r\n    'https://raw.githubusercontent.com/KhronosGroup/glTF-Sample-Models/master/2.0/Duck/glTF-Binary/Duck.glb',\r\n    model1Coords, 30\r\n  )\r\n\r\n  const model2 = createScenegraphLayer(\r\n    'duckObject2',\r\n    'https://raw.githubusercontent.com/KhronosGroup/glTF-Sample-Models/master/2.0/Duck/glTF-Binary/Duck.glb',\r\n    model2Coords, 30\r\n  )\r\n\r\n  return (\r\n    <div className=\"Map\">\r\n      <DeckGL\r\n        initialViewState={INITIAL_VIEW_STATE}\r\n        controller={true}\r\n        debug={true}>\r\n          <ReactMapGL mapboxApiAccessToken={MAPBOX_ACCESS_TOKEN}>\r\n            <Layer {...threeDLayer} />\r\n          </ReactMapGL>\r\n          <HexagonLayer  {...hexagonLayer} />\r\n          <ScenegraphLayer {...model1} coordinates={model1Coords} />\r\n          <ScenegraphLayer {...model2} coordinates={model2Coords} />\r\n        </DeckGL>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Map;\r\n","import Map from './Map';\r\nexport default Map;","import { Client } from 'boardgame.io/react';\n\nimport Game from './Game';\nimport Map from './components/Map'\n\nimport './App.css';\n\nconst App = Client({ \n  game: Game,\n  board: Map\n});\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}