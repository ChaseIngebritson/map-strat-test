{"version":3,"sources":["utils/map.js","constants/units.js","Game.js","utils/setup.js","utils/update.js","constants/models.js","constants/colors.js","components/Map/Map.js","components/Map/index.js","utils/layer.js","constants/icons.js","App.js","reportWebVitals.js","index.js"],"names":["includesCoords","haystack","needle","find","item","UNIT_PAWN","data","SfBikeParkingData","Game","setup","G","players","i","numPlayers","id","pieces","claims","moveCount","cells","turn","moveLimit","phases","start","next","moves","placeUnit","ctx","coordinates","currentPlayer","uuidv4","type","createPawn","endIf","every","player","Object","keys","length","play","moveUnit","unit","cell","some","index","parseInt","toast","error","INVALID_MOVE","position","POSITION","TOP_LEFT","push","UNIT_MODEL_MAP","PLAYER_COLOR_MAP","registerLoaders","GLTFLoader","INITIAL_VIEW_STATE","latitude","longitude","zoom","bearing","pitch","ICON_MAPPING","marker","x","y","width","height","mask","Map","props","useState","setPieces","hexagonLayer","pickable","extruded","radius","elevationScale","autoHighlight","opacity","getPosition","d","COORDINATES","onClick","layer","$event","phase","object","activeUnit","console","useEffect","tempPieces","forEach","values","piece","scenegraph","size","sizeScale","_lighting","getOrientation","getTranslation","getScale","log","className","initialViewState","controller","debug","mapboxApiAccessToken","source","filter","minzoom","paint","map","claim","color","iconLayer","iconAtlas","iconMapping","getIcon","sizeMaxPixels","getPixelOffset","getSize","getColor","App","Client","game","board","impl","Debug","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c46dcc3b.chunk.js","sourcesContent":["function includesCoords (haystack, needle) {\r\n  return haystack.find(item => item[0] === needle[0] && item[1] === needle[1])\r\n}\r\n\r\nexport { includesCoords }","const UNIT_PAWN = 'UNIT_PAWN'\r\n\r\nexport { UNIT_PAWN }","import SfBikeParkingData from './data/sf-bike-parking.json';\r\nimport { createPlayer, placeUnit, moveUnit } from './utils'\r\n    \r\nconst data = SfBikeParkingData\r\n\r\nconst Game = {\r\n  setup: (G) => {\r\n    const players = []\r\n    for (let i=0; i < G.numPlayers; i++) {\r\n      players[i] = createPlayer(i)\r\n    }\r\n\r\n    return { \r\n      cells: data,\r\n      players\r\n    }\r\n  },\r\n\r\n  turn: {\r\n    moveLimit: 1,\r\n  },\r\n\r\n  phases: {\r\n    setup: {\r\n      start: true,\r\n      next: 'play',\r\n      moves: { placeUnit },\r\n      endIf: (G, ctx) => {\r\n        // End the phase if every player has placed a piece\r\n        return G.players.every(player => Object.keys(player.pieces).length > 0)\r\n      }\r\n    },\r\n\r\n    play: {\r\n      moves: { moveUnit }\r\n    }\r\n  }\r\n}\r\n\r\nexport default Game","function loadData (url) {\r\n  \r\n}\r\n\r\nfunction createPlayer (id) {\r\n  return {\r\n    id,\r\n    pieces: {},\r\n    claims: [], \r\n    moveCount: 0\r\n  }\r\n}\r\n\r\nexport { createPlayer, loadData }","import { v4 as uuidv4 } from 'uuid'\r\nimport { INVALID_MOVE } from 'boardgame.io/core';\r\nimport { toast } from 'react-toastify';\r\n\r\nimport { includesCoords } from './map'\r\nimport { UNIT_PAWN } from '../constants/units'\r\n\r\nfunction createPawn (id, coordinates) {\r\n  return {\r\n    id,\r\n    type: UNIT_PAWN,\r\n    coordinates: coordinates\r\n  }\r\n}\r\n\r\nfunction placeUnit (G, ctx, coordinates) {\r\n  const currentPlayer = G.players[ctx.currentPlayer]\r\n  const id = uuidv4()\r\n  currentPlayer.pieces[id] = createPawn(id, coordinates)\r\n}\r\n\r\nfunction moveUnit (G, ctx, unit, cell, coordinates) {\r\n  const isClaimed = G.players.some((player, index) => {\r\n    if (index === parseInt(ctx.currentPlayer)) return false\r\n    return includesCoords(player.claims, coordinates)\r\n  })\r\n\r\n  if (isClaimed) {\r\n    toast.error(INVALID_MOVE, {\r\n      position: toast.POSITION.TOP_LEFT\r\n    })\r\n    return INVALID_MOVE\r\n  }\r\n\r\n  const currentPlayer = G.players[ctx.currentPlayer]\r\n  \r\n  // If not already owned, add to the list of coordinates owned by the player\r\n  if (!includesCoords(currentPlayer.claims, coordinates)) {\r\n    currentPlayer.claims.push(coordinates)\r\n  }\r\n\r\n  // Set the coordinates of the specified unit\r\n  currentPlayer.pieces[unit].coordinates = coordinates\r\n\r\n}\r\n\r\n\r\nexport { createPawn, placeUnit, moveUnit }","import { UNIT_PAWN } from './units'\r\n\r\nconst UNIT_PAWN_MODEL = 'https://raw.githubusercontent.com/KhronosGroup/glTF-Sample-Models/master/2.0/Duck/glTF-Binary/Duck.glb'\r\n\r\nconst UNIT_MODEL_MAP = {\r\n  [UNIT_PAWN]: UNIT_PAWN_MODEL\r\n}\r\n\r\nexport { UNIT_PAWN_MODEL, UNIT_MODEL_MAP }","const PLAYER_0_COLOR = [0, 128, 0]\r\nconst PLAYER_1_COLOR = [255, 0, 0]\r\nconst PLAYER_2_COLOR = [0, 0, 255]\r\nconst PLAYER_3_COLOR = [255, 255, 0]\r\n\r\nconst PLAYER_COLOR_MAP = [PLAYER_0_COLOR, PLAYER_1_COLOR, PLAYER_2_COLOR, PLAYER_3_COLOR]\r\n\r\nexport { PLAYER_0_COLOR, PLAYER_1_COLOR, PLAYER_2_COLOR, PLAYER_3_COLOR, PLAYER_COLOR_MAP }","import { useEffect, useState } from 'react';\r\nimport DeckGL from '@deck.gl/react';\r\nimport ReactMapGL, { Layer }  from 'react-map-gl';\r\nimport { ScenegraphLayer } from '@deck.gl/mesh-layers'\r\nimport { GLTFLoader } from '@loaders.gl/gltf';\r\nimport { registerLoaders } from '@loaders.gl/core';\r\nimport { IconLayer } from '@deck.gl/layers';\r\nimport { HexagonLayer } from '@deck.gl/aggregation-layers';\r\nimport { ToastContainer } from 'react-toastify';\r\n\r\nimport { createScenegraphLayer, createIconLayer } from '../../utils/layer'\r\nimport { UNIT_MODEL_MAP, CLAIM_ICON, PLAYER_COLOR_MAP } from '../../constants'\r\n\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nimport './Map.css';\r\n\r\nregisterLoaders(GLTFLoader);\r\n\r\nconst MAPBOX_ACCESS_TOKEN = 'pk.eyJ1IjoiZ29tb25rZXlhbWFuZ28iLCJhIjoiY2tjc2tjd2UxMHZsMzJxcGQ1YjlpMms3eSJ9._EZ2ZSCNrB8tdYqPhSaYSQ'\r\n\r\nconst INITIAL_VIEW_STATE = {\r\n  latitude: 37.779654,\r\n  longitude: -122.395232,\r\n  zoom: 15.5,\r\n  bearing: -17.6,\r\n  pitch: 45\r\n};\r\n\r\nconst ICON_MAPPING = {\r\n  marker: {x: 0, y: 0, width: 128, height: 128, mask: true}\r\n};\r\n\r\nfunction Map (props) {\r\n const [pieces, setPieces] = useState([])\r\n\r\n  const threeDLayer = {\r\n    id: '3d-buildings',\r\n    source: 'composite',\r\n    'source-layer': 'building',\r\n    filter: ['==', 'extrude', 'true'],\r\n    type: 'fill-extrusion',\r\n    minzoom: 15,\r\n    paint: {\r\n      'fill-extrusion-color': '#aaa',\r\n  \r\n      // use an 'interpolate' expression to add a smooth transition effect to the\r\n      // buildings as the user zooms in\r\n      'fill-extrusion-height': [\r\n        'interpolate',\r\n        ['linear'],\r\n        ['zoom'],\r\n        15,\r\n        0,\r\n        15.05,\r\n        ['get', 'height']\r\n      ],\r\n      'fill-extrusion-base': [\r\n        'interpolate',\r\n        ['linear'],\r\n        ['zoom'],\r\n        15,\r\n        0,\r\n        15.05,\r\n        ['get', 'min_height']\r\n      ],\r\n      'fill-extrusion-opacity': 0.6\r\n    }\r\n  };\r\n\r\n  const hexagonLayer = {\r\n    id: 'hexagon-layer',\r\n    data: props.G.cells,\r\n    pickable: true,\r\n    extruded: true,\r\n    radius: 50,\r\n    elevationScale: 0,\r\n    autoHighlight: true,\r\n    opacity: 0.3,\r\n    getPosition: d => d.COORDINATES,\r\n    onClick: (layer, $event) => {\r\n      switch (props.ctx.phase) {\r\n        case 'setup':\r\n          props.moves.placeUnit(layer.object.position)\r\n          break\r\n        case 'play':\r\n          // Replace with active unit functionality\r\n          const activeUnit = Object.keys(props.G.players[props.ctx.currentPlayer].pieces)[0]\r\n\r\n          props.moves.moveUnit(activeUnit, layer.index, layer.object.position)\r\n          break\r\n        default:\r\n          console.error('Unknown phase', props.ctx.phase)\r\n      }\r\n      \r\n      return true\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const tempPieces = []\r\n    props.G.players.forEach(player => {\r\n      Object.values(player.pieces).forEach(piece => {\r\n        tempPieces.push(\r\n          createScenegraphLayer(\r\n            piece.id,\r\n            UNIT_MODEL_MAP[piece.type],\r\n            piece.coordinates, 30\r\n          )\r\n        )\r\n      })\r\n    })\r\n    setPieces(tempPieces)\r\n  }, [props.G.cells, props.G.players])\r\n\r\n  return (\r\n    <div className=\"Map\">\r\n      <DeckGL\r\n        initialViewState={INITIAL_VIEW_STATE}\r\n        controller={true}\r\n        debug={true}>\r\n          <ReactMapGL mapboxApiAccessToken={MAPBOX_ACCESS_TOKEN}>\r\n            <Layer {...threeDLayer} />\r\n          </ReactMapGL>\r\n          <HexagonLayer {...hexagonLayer} />\r\n\r\n          {props.G.players.map((player, index) => {\r\n            return player.claims.map(claim => {\r\n              const iconLayer = createIconLayer(\r\n                `icon-${claim[0]},${claim[1]}`,\r\n                CLAIM_ICON,\r\n                ICON_MAPPING,\r\n                PLAYER_COLOR_MAP[index],\r\n                claim\r\n              )\r\n              \r\n              return <IconLayer key={`${claim[0]},${claim[1]}`} {...iconLayer} coordinates={claim} />\r\n            })\r\n          })}\r\n\r\n          {pieces.map(piece => (\r\n            <ScenegraphLayer key={piece.id} {...piece} coordinates={piece.data[0].coordinates} />\r\n          ))}\r\n        </DeckGL>\r\n        <ToastContainer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Map;\r\n","import Map from './Map';\r\nexport default Map;","function createScenegraphLayer (\r\n  id,\r\n  scenegraph,\r\n  coordinates,\r\n  sizeScale\r\n) {\r\n  return {\r\n    id,\r\n    scenegraph,\r\n    data: [{ position: coordinates, size: 100 }],\r\n    sizeScale,\r\n    _lighting: 'pbr',\r\n    getPosition: d => d.position,\r\n    getOrientation: [0, 330, 90],\r\n    getTranslation: [0, 0, 0],\r\n    getScale: [1, 1, 1],\r\n    pickable: true,\r\n    onClick: (layer, $event) => {\r\n      console.log('triggered scenegraphLayer click', layer)\r\n      return true\r\n    }\r\n  }\r\n}\r\n\r\nfunction createIconLayer (\r\n  id,\r\n  iconAtlas,\r\n  iconMapping,\r\n  color,\r\n  coordinates\r\n) {\r\n  return {\r\n    id,\r\n    data: [{ coordinates }],\r\n    pickable: true,\r\n    iconAtlas,\r\n    iconMapping,\r\n    getIcon: d => 'marker',\r\n    sizeScale: 15,\r\n    sizeMaxPixels: 50,\r\n    getPixelOffset: d => [0, -40],\r\n    getPosition: d => d.coordinates,\r\n    getSize: d => 5,\r\n    getColor: d => color\r\n  }\r\n}\r\n\r\nexport { createScenegraphLayer, createIconLayer }","const CLAIM_ICON = 'https://raw.githubusercontent.com/visgl/deck.gl-data/master/website/icon-atlas.png'\r\n\r\nexport { CLAIM_ICON }","import { Client } from 'boardgame.io/react';\r\nimport { Debug } from 'boardgame.io/debug';\r\n\r\nimport Game from './Game';\r\nimport Map from './components/Map'\r\n\r\nimport './App.css';\r\n\r\nconst App = Client({ \r\n  game: Game,\r\n  board: Map,\r\n  numPlayers: 2,\r\n  debug: { impl: Debug }\r\n});\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}