{"version":3,"sources":["constants/units.js","Game.js","utils/setup.js","utils/update.js","constants/models.js","components/Map/Map.js","components/Map/index.js","utils/layer.js","App.js","reportWebVitals.js","index.js"],"names":["UNIT_PAWN","data","SfBikeParkingData","map","locationIn","location","occupied","Game","setup","G","players","i","numPlayers","id","pieces","moveCount","cells","turn","moveLimit","phases","start","next","moves","placeUnit","ctx","coordinates","currentPlayer","uuidv4","type","createPawn","endIf","every","player","Object","keys","length","play","moveUnit","unit","cell","INVALID_MOVE","debug","impl","Debug","UNIT_MODEL_MAP","registerLoaders","GLTFLoader","INITIAL_VIEW_STATE","latitude","longitude","zoom","bearing","pitch","Map","props","useState","setPieces","hexagonLayer","pickable","extruded","radius","elevationScale","autoHighlight","opacity","getPosition","d","COORDINATES","onClick","layer","$event","phase","object","position","activeUnit","index","console","error","useEffect","tempPieces","forEach","values","piece","layerId","scenegraphModelUrl","push","scenegraph","size","sizeScale","_lighting","getOrientation","getTranslation","getScale","log","className","initialViewState","controller","mapboxApiAccessToken","source","filter","minzoom","paint","App","Client","game","board","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fd05e1db.chunk.js","sourcesContent":["const UNIT_PAWN = 'UNIT_PAWN'\r\n\r\nexport { UNIT_PAWN }","import { Debug } from 'boardgame.io/debug';\r\n\r\nimport SfBikeParkingData from './data/sf-bike-parking.json';\r\nimport { createPlayer, placeUnit, moveUnit } from './utils'\r\n    \r\nconst data = SfBikeParkingData.map(locationIn => {\r\n  const location = { ...locationIn }\r\n  location.occupied = null\r\n  return location\r\n})\r\n\r\nconst Game = {\r\n  setup: (G) => {\r\n    const players = []\r\n    for (let i=0; i < G.numPlayers; i++) {\r\n      players[i] = createPlayer(i)\r\n    }\r\n\r\n    return { \r\n      cells: data,\r\n      players\r\n    }\r\n  },\r\n\r\n  turn: {\r\n    moveLimit: 1,\r\n  },\r\n\r\n  phases: {\r\n    setup: {\r\n      start: true,\r\n      next: 'play',\r\n      moves: { placeUnit },\r\n      endIf: (G, ctx) => {\r\n        // End the phase if every player has placed a piece\r\n        return G.players.every(player => Object.keys(player.pieces).length > 0)\r\n      }\r\n    },\r\n\r\n    play: {\r\n      moves: { moveUnit }\r\n    }\r\n  },\r\n\r\n  debug: { impl: Debug }\r\n}\r\n\r\nexport default Game","function loadData (url) {\r\n  \r\n}\r\n\r\nfunction createPlayer (id) {\r\n  return {\r\n    id,\r\n    pieces: {},\r\n    moveCount: 0\r\n  }\r\n}\r\n\r\nexport { createPlayer, loadData }","import { v4 as uuidv4 } from 'uuid'\r\nimport { INVALID_MOVE } from 'boardgame.io/core';\r\n\r\nimport { UNIT_PAWN } from '../constants/units'\r\n\r\nfunction createPawn (id, coordinates) {\r\n  return {\r\n    id,\r\n    type: UNIT_PAWN,\r\n    coordinates: coordinates\r\n  }\r\n}\r\n\r\nfunction placeUnit (G, ctx, coordinates) {\r\n  const currentPlayer = G.players[ctx.currentPlayer]\r\n  const id = uuidv4()\r\n  currentPlayer.pieces[id] = createPawn(id, coordinates)\r\n}\r\n\r\nfunction moveUnit (G, ctx, unit, cell, coordinates) {\r\n  if (G.cells[cell].occupied !== null) return INVALID_MOVE\r\n\r\n  G.cells[cell].occupied = ctx.currentPlayer;\r\n\r\n  const currentPlayer = G.players[ctx.currentPlayer]\r\n  currentPlayer.pieces[unit].coordinates = coordinates\r\n\r\n}\r\n\r\n\r\nexport { createPawn, placeUnit, moveUnit }","import { UNIT_PAWN } from './units'\r\n\r\nconst UNIT_PAWN_MODEL = 'https://raw.githubusercontent.com/KhronosGroup/glTF-Sample-Models/master/2.0/Duck/glTF-Binary/Duck.glb'\r\n\r\nconst UNIT_MODEL_MAP = {\r\n  [UNIT_PAWN]: UNIT_PAWN_MODEL\r\n}\r\n\r\nexport { UNIT_PAWN_MODEL, UNIT_MODEL_MAP }","import { useEffect, useState } from 'react';\r\nimport DeckGL from '@deck.gl/react';\r\nimport ReactMapGL, { Layer }  from 'react-map-gl';\r\nimport { ScenegraphLayer } from '@deck.gl/mesh-layers'\r\nimport { GLTFLoader } from '@loaders.gl/gltf';\r\nimport { registerLoaders } from '@loaders.gl/core';\r\nimport { HexagonLayer } from '@deck.gl/aggregation-layers';\r\n\r\nimport './Map.css';\r\nimport { createScenegraphLayer } from '../../utils/layer'\r\nimport { UNIT_PAWN_MODEL, UNIT_MODEL_MAP } from '../../constants/models'\r\n\r\nregisterLoaders(GLTFLoader);\r\n\r\nconst MAPBOX_ACCESS_TOKEN = 'pk.eyJ1IjoiZ29tb25rZXlhbWFuZ28iLCJhIjoiY2tjc2tjd2UxMHZsMzJxcGQ1YjlpMms3eSJ9._EZ2ZSCNrB8tdYqPhSaYSQ'\r\n\r\nconst INITIAL_VIEW_STATE = {\r\n  latitude: 37.779654,\r\n  longitude: -122.395232,\r\n  zoom: 15.5,\r\n  bearing: -17.6,\r\n  pitch: 45\r\n};\r\n\r\nfunction Map (props) {\r\n const [pieces, setPieces] = useState([])\r\n\r\n  const threeDLayer = {\r\n    id: '3d-buildings',\r\n    source: 'composite',\r\n    'source-layer': 'building',\r\n    filter: ['==', 'extrude', 'true'],\r\n    type: 'fill-extrusion',\r\n    minzoom: 15,\r\n    paint: {\r\n      'fill-extrusion-color': '#aaa',\r\n  \r\n      // use an 'interpolate' expression to add a smooth transition effect to the\r\n      // buildings as the user zooms in\r\n      'fill-extrusion-height': [\r\n        'interpolate',\r\n        ['linear'],\r\n        ['zoom'],\r\n        15,\r\n        0,\r\n        15.05,\r\n        ['get', 'height']\r\n      ],\r\n      'fill-extrusion-base': [\r\n        'interpolate',\r\n        ['linear'],\r\n        ['zoom'],\r\n        15,\r\n        0,\r\n        15.05,\r\n        ['get', 'min_height']\r\n      ],\r\n      'fill-extrusion-opacity': 0.6\r\n    }\r\n  };\r\n\r\n  const hexagonLayer = {\r\n    id: 'hexagon-layer',\r\n    data: props.G.cells,\r\n    pickable: true,\r\n    extruded: true,\r\n    radius: 50,\r\n    elevationScale: 0,\r\n    autoHighlight: true,\r\n    opacity: 0.3,\r\n    getPosition: d => d.COORDINATES,\r\n    onClick: (layer, $event) => {\r\n      switch (props.ctx.phase) {\r\n        case 'setup':\r\n          props.moves.placeUnit(layer.object.position)\r\n          break\r\n        case 'play':\r\n          // Replace with active unit functionality\r\n          const activeUnit = Object.keys(props.G.players[props.ctx.currentPlayer].pieces)[0]\r\n\r\n          props.moves.moveUnit(activeUnit, layer.index, layer.object.position)\r\n          break\r\n        default:\r\n          console.error('Unknown phase', props.ctx.phase)\r\n      }\r\n      \r\n      return true\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const tempPieces = []\r\n    props.G.players.forEach(player => {\r\n      Object.values(player.pieces).forEach(piece => {\r\n        tempPieces.push(\r\n          createScenegraphLayer(\r\n            piece.id,\r\n            UNIT_MODEL_MAP[piece.type],\r\n            piece.coordinates, 30\r\n          )\r\n        )\r\n      })\r\n    })\r\n    setPieces(tempPieces)\r\n  }, [props.G.cells, props.G.players])\r\n\r\n  return (\r\n    <div className=\"Map\">\r\n      <DeckGL\r\n        initialViewState={INITIAL_VIEW_STATE}\r\n        controller={true}\r\n        debug={true}>\r\n          <ReactMapGL mapboxApiAccessToken={MAPBOX_ACCESS_TOKEN}>\r\n            <Layer {...threeDLayer} />\r\n          </ReactMapGL>\r\n          <HexagonLayer  {...hexagonLayer} />\r\n          {pieces.map(piece => (\r\n            <ScenegraphLayer key={piece.id} {...piece} coordinates={piece.data[0].coordinates} />\r\n          ))}\r\n        </DeckGL>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Map;\r\n","import Map from './Map';\r\nexport default Map;","function createScenegraphLayer (\r\n  layerId,\r\n  scenegraphModelUrl,\r\n  coordinates,\r\n  sizeScale\r\n) {\r\n  return {\r\n    id: layerId,\r\n    scenegraph: scenegraphModelUrl,\r\n    data: [{ position: coordinates, size: 100 }],\r\n    sizeScale,\r\n    _lighting: 'pbr',\r\n    getPosition: d => d.position,\r\n    getOrientation: [0, 330, 90],\r\n    getTranslation: [0, 0, 0],\r\n    getScale: [1, 1, 1],\r\n    pickable: true,\r\n    onClick: (layer, $event) => {\r\n      console.log('triggered scenegraphLayer click', layer)\r\n      return true\r\n    }\r\n  }\r\n}\r\n\r\nexport { createScenegraphLayer }","import { Client } from 'boardgame.io/react';\r\n\r\nimport Game from './Game';\r\nimport Map from './components/Map'\r\n\r\nimport './App.css';\r\n\r\nconst App = Client({ \r\n  game: Game,\r\n  board: Map\r\n});\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}